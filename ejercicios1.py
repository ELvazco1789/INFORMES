# -*- coding: utf-8 -*-
"""ejercicios1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kQRV-2Lng87YDSINL0lfzzshPKsGztqR
"""

##################EJERCICIO 1 
a = (2, 2, 3)
b=(2, 3, 4)
c=(1, 1, 3)
d=(0.5, 0.5, 2) 
e=(1, 2, 1) 
f=(1, 0.5, 1)
g=(3, 2, 0.5)
h=(3, 1, 2)
i=(0, 0, 0)
j=(2, 0, 0.5) 

from scipy.spatial import distance
a = (2, 2, 3)

lista1=(distance.euclidean(a,b),distance.euclidean(a, c),distance.euclidean(a, d),distance.euclidean(a, e),distance.euclidean(a, f),distance.euclidean(a, g),distance.euclidean(a, h),distance.euclidean(a, i),distance.euclidean(a, j))
min(lista1)


from scipy.spatial import distance
b=(2, 3, 4)

lista2=(distance.euclidean(b,a),distance.euclidean(b, c),distance.euclidean(b, d),distance.euclidean(b, e),distance.euclidean(b, f),distance.euclidean(b, g),distance.euclidean(b, h),distance.euclidean(b, i),distance.euclidean(b, j))
min(lista2)

from scipy.spatial import distance
c=(1, 1, 3)

lista3=(distance.euclidean(c,a),distance.euclidean(c, b),distance.euclidean(c, d),distance.euclidean(c, e),distance.euclidean(c, f),distance.euclidean(c, g),distance.euclidean(c, h),distance.euclidean(c, i),distance.euclidean(c, j))
min(lista3)



from scipy.spatial import distance
d=(0.5, 0.5, 2) 

lista4=(distance.euclidean(d,a),distance.euclidean(d, b),distance.euclidean(d,c),distance.euclidean(d, e),distance.euclidean(d, f),distance.euclidean(d, g),distance.euclidean(d, h),distance.euclidean(d, i),distance.euclidean(d, j))
min(lista4)

from scipy.spatial import distance
e=(1, 2, 1)

lista5=(distance.euclidean(e,a),distance.euclidean(e, b),distance.euclidean(e,c),distance.euclidean(e,d),distance.euclidean(e, f),distance.euclidean(e, g),distance.euclidean(e, h),distance.euclidean(e, i),distance.euclidean(e, j))
min(lista5)

from scipy.spatial import distance
f=(1, 0.5, 1)

lista6=(distance.euclidean(f,a),distance.euclidean(f, b),distance.euclidean(f,c),distance.euclidean(f,d),distance.euclidean(f, e),distance.euclidean(f, g),distance.euclidean(f, h),distance.euclidean(f, i),distance.euclidean(f, j))
min(lista6)


from scipy.spatial import distance
g=(3, 2, 0.5)

lista7=(distance.euclidean(g,a),distance.euclidean(g, b),distance.euclidean(g,c),distance.euclidean(g,d),distance.euclidean(g, e),distance.euclidean(g,f),distance.euclidean(g, h),distance.euclidean(g, i),distance.euclidean(g, j))
min(lista7)

from scipy.spatial import distance
h=(3, 1, 2)

lista8=(distance.euclidean(h,a),distance.euclidean(h, b),distance.euclidean(h,c),distance.euclidean(h,d),distance.euclidean(h, e),distance.euclidean(h,f),distance.euclidean(h, g),distance.euclidean(h, i),distance.euclidean(h, j))
min(lista8)

from scipy.spatial import distance
i=(0, 0, 0)

lista9=(distance.euclidean(i,a),distance.euclidean(i, b),distance.euclidean(i,c),distance.euclidean(i,d),distance.euclidean(i, e),distance.euclidean(i,f),distance.euclidean(i, g),distance.euclidean(i,h),distance.euclidean(i, j))
min(lista9)


from scipy.spatial import distance
j=(2, 0, 0.5) 

lista10=(distance.euclidean(j,a),distance.euclidean(j, b),distance.euclidean(j,c),distance.euclidean(j,d),distance.euclidean(j, e),distance.euclidean(j,f),distance.euclidean(j, g),distance.euclidean(j,h),distance.euclidean(j, i))
min(lista10)


lista11=(min(lista1),min(lista2),min(lista3),min(lista4),min(lista5),min(lista6),min(lista7),min(lista8),min(lista9),min(lista10))

print("Este es la minima distancia entre las minimas distancias de cada lista: ", min(lista11))
ParCercano=min(lista11)
print("ParCercano=P4-P6=",ParCercano)

#############EJERCICIO 2. 
n=0
N1=1
lista1=[]
while n<12: 
    lista1.append(N1)
    lista1.append(N1*(-1))
    n+=1
if n>=12: 
  lista1.append(N1)
print("lista1",lista1)




S=100
lista2=[]
while S>0:

  lista2.append(S) 
  if S>0:
     lista2.append(-1)
  S-=1 
print("lista3= ",lista3)


Y=2
Y1=0
lista3=[]
while Y<600: 
  lista3.append(Y)
  Y+=2
  lista3.append(Y)
  Y1+=5
  lista3.append(Y1)
  Y+=2 
  if Y==10: 
    lista3.pop()
print("Lista3=",lista3)







Listadelistas=[lista1,lista2,lista3]
print("listadelistas= ",Listadelistas)

################EJERCICIO 4 
############## tenemos los sgtes datos y los hemos condensado de la sgte manera:
######### los separamos por días como se mostraba en la tabla y para nuestro caso usamos los binaros 0 y 1 para los días que no uso y que si uso el transporte,
########### respectivamente: 
Dialunes = [[0, 0], [0, 0], [0, 0], [0, 1], [0, 1], [0, 0]]
Diamartes = [[0, 0], [1, 1], [1, 1], [0, 1], [0, 0], [0, 0]]
Diamiercoles = [[0, 0], [0, 1], [0, 0], [0, 0], [1, 1], [0, 0]]
Diajueves = [[0, 1], [1, 1], [0, 0], [1, 1], [0, 0], [1, 1]]
Diaviernes = [[1, 1], [0, 1], [1, 1], [1, 1], [0, 1], [1, 1]]

####### Luego esto estable una variable con el total de cada persona que tendría que pagar pero como vamos a usar un ciclo 
###### entonces esta variable es un contador que aumentará.

Dinero_maria = 0
Dinero_esteban = 0
Dinero_angie = 0
Dinero_juan = 0
Dinero_camila = 0
Dinero_jose = 0


tarifa = 15000                     ######Debido a que la tarifa total tiene encuenta la ida y la vuelta entonces decidi usarlo como contador. 
Dialunes_ida = 0
Dialunes_vuelta = 0
Diamartes_ida = 0
Diamartes_vuelta = 0
Diamiercoles_ida = 0
Diamiercoles_vuelta = 0
Diajueves_ida = 0
Diajueves_vuelta = 0
Diaviernes_ida = 0
Diaviernes_vuelta = 0

for x in range(6):                    ###se establece 6 porque es hasta donde queremos termine nuestra funcion range(fin)
  if Dialunes[x][0] == 0:
    Dialunes_ida += 1

  if Dialunes[x][1] == 0:
    Dialunes_vuelta += 1

if Dialunes[0][0] == 0:               ##### como lo mencionamos anteriormente nuestro resultado depende de la sumatoria total de la ida y la vuelta si hubo. 
  Dinero_juan += tarifa/Dialunes_ida  ##### de hecho por este mismo motivo decidi usar la estructura for, ya que me permite hacer cambias en una lista 
if Dialunes[1][0] == 0:                ##### iterable recorriendo especificamente los valores con la variable que quiero analizar. 
  Dinero_camila += tarifa/Dialunes_ida
if Dialunes[2][0] == 0:
  Dinero_jose += tarifa/Dialunes_ida
if Dialunes[3][0] == 0:
  Dinero_maria += tarifa/Dialunes_ida          #######Cada uno de los recuadros que acompaña la sentencia del if el cual se quiere comparar se refiere a los días por cada persona en que usaron el transporte
                                               ######
if Dialunes[4][0] == 0:
  Dinero_esteban += tarifa/Dialunes_ida
if Dialunes[5][0] == 0:
  Dinero_angie += tarifa/Dialunes_ida

if Dialunes[0][1] == 0:
  Dinero_juan += tarifa/Dialunes_vuelta
if Dialunes[1][1] == 0:
  Dinero_camila += tarifa/Dialunes_vuelta
if Dialunes[2][1] == 0:
  Dinero_jose += tarifa/Dialunes_vuelta
if Dialunes[3][1] == 0:
  Dinero_maria += tarifa/Dialunes_vuelta
if Dialunes[4][1] == 0:
  Dinero_esteban += tarifa/Dialunes_vuelta
if Dialunes[5][1] == 0:
  Dinero_angie += tarifa/Dialunes_vuelta

diccionarioPagos = {'Juan': Dinero_juan,
                    'Camila': Dinero_camila,
                    'Jose': Dinero_jose,
                    'Maria': Dinero_maria,
                    'Esteban': Dinero_esteban,
                    'Angie': Dinero_angie}

print(diccionarioPagos['Esteban'])

for x in range(6):                    ###se establece 6 porque es hasta donde queremos termine nuestra funcion range(fin)
  if Diamartes[x][0] == 0:
    Diamartes_ida += 1

  if Diamartes[x][1] == 0:
    Diamartes_vuelta += 1

if Diamartes[0][0] == 0:               ##### como lo mencionamos anteriormente nuestro resultado depende de la sumatoria total de la ida y la vuelta si hubo. 
  Dinero_juan += tarifa/Diamartes_ida  ##### de hecho por este mismo motivo decidi usar la estructura for, ya que me permite hacer cambias en una lista 
if Diamartes[1][0] == 0:                ##### iterable recorriendo especificamente los valores con la variable que quiero analiza
  Dinero_camila += tarifa/Diamartes_ida ######
if Diamartes[2][0] == 0:
  Dinero_jose += tarifa/Diamartes_ida
if Diamartes[3][0] == 0:
  Dinero_maria += tarifa/Diamartes_ida
if Diamartes[4][0] == 0:
  Dinero_esteban += tarifa/Diamartes_ida
if Diamartes[5][0] == 0:
  Dinero_angie += tarifa/Diamartes_ida

if Diamartes[0][1] == 0:
  Dinero_juan += tarifa/Diamartes_vuelta
if Diamartes[1][0] == 0:
  Dinero_camila += tarifa/Diamartes_vuelta
if Diamartes[2][1] == 0:
  Dinero_jose += tarifa/Diamartes_vuelta
if Diamartes[3][1] == 0:
  Dinero_maria += tarifa/Diamartes_vuelta
if Diamartes[4][1] == 0:
  Dinero_esteban += tarifa/Diamartes_vuelta
if Diamartes[5][1] == 0:
  Dinero_angie += tarifa/Diamartes_vuelta

diccionarioPagos = {'Juan': Dinero_juan,
                    'Camila': Dinero_camila,
                    'Jose': Dinero_jose,
                    'Maria': Dinero_maria,
                    'Esteban': Dinero_esteban,
                    'Angie': Dinero_angie}

print(diccionarioPagos['Jose'])


for x in range(6):                    ###se establece 6 porque es hasta donde queremos termine nuestra funcion range(fin)
  if Diamiercoles[x][0] == 0:
    Diamiercoles_ida += 1

  if Diamiercoles[x][1] == 0:
    Diamiercoles_vuelta += 1

if Diamiercoles[0][0] == 0:               
  Dinero_juan += tarifa/Diamiercoles_ida  
if Diamiercoles[1][0] == 0:                
  Dinero_camila += tarifa/Diamiercoles_ida
if Diamiercoles[2][0] == 0:
  Dinero_jose += tarifa/Diamiercoles_ida
if Diamiercoles[3][0] == 0:
  Dinero_maria += tarifa/Diamiercoles_ida
if Diamiercoles[4][0] == 0:
  Dinero_esteban += tarifa/Diamiercoles_ida
if Diamiercoles[5][0] == 0:
  Dinero_angie += tarifa/Diamiercoles_ida

if Diamartes[0][1] == 0:
  Dinero_juan += tarifa/Diamiercoles_vuelta
if Diamartes[1][1] == 0:
  Dinero_camila += tarifa/Diamiercoles_vuelta
if Diamartes[2][1] == 0:
  Dinero_jose += tarifa/Diamiercoles_vuelta
if Diamartes[3][1] == 0:
  Dinero_maria += tarifa/Diamiercoles_vuelta
if Diamartes[4][1] == 0:
  Dinero_esteban += tarifa/Diamiercoles_vuelta
if Diamartes[5][1] == 0:
  Dinero_angie += tarifa/Diamiercoles_vuelta

diccionarioPagos = {'Maria': Dinero_maria,
                    'Esteban': Dinero_esteban,
                    'Angie': Dinero_angie,
                     'Juan': Dinero_juan,
                    'Camila': Dinero_camila,
                    'Jose': Dinero_jose,
                    }

print(diccionarioPagos['Angie'])

